1. Implemented the program as per requirement 2. Attached source code and sample output **************Please do upvote to appreciate our time. Thank you!******************
Source Code:
Boat.java
import java.io.Serializable; import java.util.ArrayList;
public class Boat implements Serializable{
private BoatType boatType; private String name; private int year; private String make; private double feet; private double purchasePrice; private double expense; private static ArrayList<Boat> boatList=new ArrayList<>();
 public Boat(BoatType boatType, String name, int year, String make, double feet, double purchasePrice, double expense) { super(); this.boatType = boatType; this.name = name; this.year = year; this.make = make; this.feet = feet; this.purchasePrice = purchasePrice; this.expense = expense; } /** * @return the boatType */ public BoatType getBoatType() { return boatType; } /** * @param boatType the boatType to set */ public void setBoatType(BoatType boatType) { this.boatType = boatType; } /** * @return the name */ public String getName() { return name; } /** * @param name the name to set */ public void setName(String name) { this.name = name; } /** * @return the year */ public int getYear() { return year; } /** * @param year the year to set */ public void setYear(int year) { this.year = year; } /** * @return the make */ public String getMake() { return make; } /** * @param make the make to set */ public void setMake(String make) { this.make = make; } /** * @return the feet */ public double getFeet() { return feet; } /** * @param feet the feet to set */ public void setFeet(double feet) { this.feet = feet; } /** * @return the purchasePrice */ public double getPurchasePrice() { return purchasePrice; } /** * @param purchasePrice the purchasePrice to set */ public void setPurchasePrice(double purchasePrice) { this.purchasePrice = purchasePrice; } /** * @return the expense */ public double getExpense() { return expense; } /** * @param expense the expense to set */ public void setExpense(double expense) { this.expense = expense; } public static ArrayList<Boat> getBoatList() { return boatList; } public static void setBoatList(ArrayList<Boat> list) { boatList=list; }  public static double getPaidTotal() { double paidTotal=0;
for(Boat boat:boatList) { paidTotal=paidTotal+boat.getPurchasePrice(); } return paidTotal; } public static double getSpentTotal() { double spentTotal=0; for(Boat boat:boatList) { spentTotal=spentTotal+boat.getExpense(); } return spentTotal; }  public boolean checkExpense(double amt) { if(this.getPurchasePrice()<amt) { System.out.println("Expense not permitted, only "+(this.getPurchasePrice()-this.getExpense())+" left to spend."); return false; } return true; } @Override public String toString() { return boatType + " " + name + " "+ year + " " + make + " " + feet + "':Paid $"+ purchasePrice + ":Spent $" + expense ; }    }
CommodoreSailingClubMain.java
import java.io.BufferedReader; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.FileReader; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.util.ArrayList; import java.util.Scanner;
public class CommodoreSailingClubMain {
public static void main(String[] args) { Scanner input=new Scanner(System.in); ArrayList<Boat> boatList=Boat.getBoatList();
//If command line arguments are provided if(args.length!=0) { try { boatList=readCSVFileToList(args[0]); Boat.setBoatList(boatList);
} catch (NumberFormatException e) {
e.printStackTrace(); }  } else { try { //Read from FleetData.db boatList=readFleetData("C:\\Users\\asus\\FleetData.db"); Boat.setBoatList(boatList); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (IOException e) { System.out.println("File not found ! Exiting!"); } }
String userChoice="A"; //Initialize to any variable while(!userChoice.equalsIgnoreCase("X")) { System.out.print("Welcome to the Fleet Management System\r\n" +  "--------------------------------------\r\n" +  "\r\n" +  "(P)rint, (A)dd, (R)emove, (E)xpense, e(X)it : ");
userChoice=input.nextLine().toUpperCase();
switch(userChoice) { case "P": System.out.println("Fleet report:"); for(Boat boat:boatList) System.out.println(boat.toString()); System.out.println("Total\t\t: Paid $"+Boat.getPaidTotal()+":Spent $"+Boat.getSpentTotal()); break; case "A": System.out.print("Please enter the new boat CSV data : "); String [] strArr=input.nextLine().split(","); BoatType boatType=strArr[0].equalsIgnoreCase("POWER")?BoatType.POWER:BoatType.SAILING; Boat boat=new Boat(boatType, strArr[1], Integer.parseInt(strArr[2]), strArr[3], Double.parseDouble(strArr[4]), Double.parseDouble(strArr[5]), 0); boatList.add(boat); break; case "R": System.out.print("Which boat do you want to remove? : "); String boatname=input.nextLine(); Boat boatToRTemove=null; boolean boatExists=false; for(Boat boatO:boatList) { if(boatO.getName().equalsIgnoreCase(boatname)) { boatExists=true; boatToRTemove=boatO; } } if(!boatExists) System.out.println("Cannot find boat "+boatname); else boatList.remove(boatToRTemove);
break; case "E": System.out.print("Which boat do you want to spend on? : "); boatname=input.nextLine(); boatExists=false; double amt=0; Boat boatToUpdate=null;
for(Boat boatO:boatList) { if(boatO.getName().equalsIgnoreCase(boatname)) { boatExists=true; System.out.print("How much do you want to spend? : "); amt=input.nextDouble(); input.nextLine(); boatToUpdate=boatO; } } if(!boatExists) System.out.println("Cannot find boat "+boatname); else { if(boatToUpdate.checkExpense(boatToUpdate.getExpense()+amt)) { boatList.remove(boatToUpdate); boatToUpdate.setExpense(boatToUpdate.getExpense()+amt); boatList.add(boatToUpdate); System.out.println("Expense authorized, $"+boatToUpdate.getExpense()+" spent."); } } break; case "X": System.out.println("Exiting the Fleet Management System"); //Write to fleetdata.db writeSerializedFleetData(boatList); break; default: System.out.println("Invalid menu option, try again"); } }
}
private static ArrayList<Boat> readCSVFileToList(String fileName) throws NumberFormatException { ArrayList<Boat> boatList=new ArrayList<>(); //Initialize reader BufferedReader br=null;
try { br = new BufferedReader(new FileReader(fileName));
 String line=null;
while ((line = br.readLine()) != null) //returns a Boolean value  {  String [] lines= line.split(","); // use comma as separator  BoatType boatType=lines[0].equalsIgnoreCase("POWER")?BoatType.POWER:BoatType.SAILING; Boat boat=new Boat(boatType, lines[1], Integer.parseInt(lines[2]), lines[3], Double.parseDouble(lines[4]), Double.parseDouble(lines[5]), 0); boatList.add(boat); } } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }
return boatList;  }
private static ArrayList<Boat> readFleetData(String fileName) throws IOException, ClassNotFoundException { ArrayList<Boat> boatList=new ArrayList<>(); try { FileInputStream fileIn = new FileInputStream(fileName); ObjectInputStream objectIn = new ObjectInputStream(fileIn); Object obj = null; while((obj = objectIn.readObject())!=null) { boatList.add((Boat)obj); } objectIn.close(); } catch (Exception e) { // TODO Auto-generated catch block }
return boatList; }
private static void writeSerializedFleetData(ArrayList<Boat> boatList) { // write people to another file File secondPeopleFile = new File("C:\\Users\\asus\\FleetData.db"); ObjectOutputStream writeObj = null; try { writeObj = new ObjectOutputStream(new FileOutputStream(secondPeopleFile));
for(Boat boatO:boatList) { writeObj.writeObject(boatO);
} writeObj.close(); } catch (IOException e) { System.out.println("Problems writing to file");
e.printStackTrace(); } }
}
O
